.\"
.\" sc_hoiho.1
.\"
.\" Author: Matthew Luckie <mjl@luckie.org.nz>
.\"
.\" Copyright (c) 2019 Matthew Luckie
.\"                    All rights reserved
.\"
.\" $Id: sc_hoiho.1,v 1.2 2019/09/23 01:59:44 mjl Exp $
.\"
.Dd September 16, 2019
.Dt SC_HOIHO 1
.Os
.Sh NAME
.Nm sc_hoiho
.Nd Holistic Orthography of Internet Hostname Observations
.Sh SYNOPSIS
.Nm
.Bk -words
.Op Fl 6
.Op Fl d Ar dump
.Op Fl D Ar domain
.Op Fl O Ar option
.Op Fl r Ar regex
.Op Fl t Ar threadc
public-suffix-list.dat routers.txt
.Ek
.\""""""""""""
.Sh DESCRIPTION
The
.Nm
utility learns regular expressions that extract router names from hostnames,
based on a set of training routers whose interfaces were inferred to be
aliases by other alias resolution techniques.
The technique is described in the paper "Learning to Extract Router Names
from Hostnames" published in the ACM Internet Measurement Conference 2019.
The supported options to
.Nm
are as follows:
.Bl -tag -width Ds
.It Fl 6
specifies that the input training set contains IPv6 addresses, and not
IPv4 addresses.
.It Fl d Ar dump
specifies the dump ID to use to analyze the collected data.
Currently, ID values 1 (working-set), 2 (routers), and 3 (best-regex) are
valid, which dump the working set of regexes for each suffix, the
result of applying the best regex to the training data, and the best
regex, respectively.
.It Fl D Ar domain
specifies the domain suffix that
.Nm
should operate on.  If no suffix is specified, then
.Nm
operates on all suffixes.
.It Fl O Ar option
allows the behavior of
.Nm
to be further tailored.
The current choices for this option are:
.Bl -dash -offset 2n -compact -width 1n
.It
.Sy application:
Show the outcome of applying the regular expression to the application set.
.It
.Sy debug:
output significant volumes of debugging information.  Debugging
information is only printed when a
.Nm
is using a single thread.
.It
.Sy json:
Output inferences using json format.  This option is only applicable on
dump ID 2.
.It
.Sy nojit:
Do not use
.Xr pcre 3
or
.Xr pcre2 3
just in time complication to improve regex performance.
.It
.Sy norefine:
do not do any refinement of regular expressions.
.It
.Sy norefine-tp, refine-tp:
do not, or do, execute the phase that builds literals into components
that extract a string from the hostnames.  This phase is described in
phase 5.2 of the paper.
.It
.Sy norefine-fne, refine-fne:
do not, or do, execute the phase that embeds literals in a regex component
that separates hostnames from their training routers.  This phase
is described in section 5.3 of the paper.
.It
.Sy norefine-class, refine-class:
do not, or do, execute the phase that embeds character classes in regular
expressions.  This phase is described in section 5.4 of the paper.
.It
.Sy norefine-fnu, refine-fnu:
do not, or do, execute the phase that builds additional regexes to use as a
companion regex with another regex that did not cluster all interfaces
on a router.  This phase is described in section 5.5 of the paper.
.It
.Sy norefine-sets, refine-sets:
do not, or do, execute the phase that builds naming convention sets using the
regexes in the working set.  This phase is described in section 5.6 of
the paper.
.It
.Sy norefine-ip, refine-ip:
do not, or do, execute the phase that builds regexes to filter hostnames with
IP addresses in them, where the IP address would be part of an
extracted name.  This phase is described in section 5.7 of the paper.
.It
.Sy norefine-fp, refine-fp:
do not, or do, execute the phase that builds regexes to filter hostnames that,
if matched, would result in false positives according to the training
data.  This phase is described in phase 5.7 of the paper.
.It
.Sy nothin:
do not, or do, remove any redundant regexes at the end of each phase, as
described in section 4.5 of the paper.
.It
.Sy nothin-matchc, thin-matchc:
do not, or do, remove any regexes that do not meet the minimum number
of matches to be considered capturing a convention.  The conditions
are described in section 4.5 of the paper.
.It
.Sy nothin-same, thin-same:
do not, or do, remove redundant regexes that perform the same clustering.
.It
.Sy nothin-mask, thin-mask:
do not, or do, remove redundant regexes whose clustering is entirely
contained in another regex, with no additional false positives.
.It
.Sy randindex:
compute the Rand Index metric on the clustering of hostnames according
to the training data.
.El
.It Fl r Ar regex
specifies the name of a file containing a working set of regexes, or a
naming convention, to apply.
.It Fl t Ar threadc
specifies the number of threads to use in the threadpool.  By default,
.Nm
will determine the number of processors online, and use all of them.
.El
.\""""""""""""
.Sh EXAMPLES
Given a set of routers in a file named routers.txt, and a copy of
public_suffix_list.dat obtained from the Mozilla Foundation's
https://publicsuffix.org/list/ website:
.Pp
.in +.3i
.nf
192.0.2.1    esr1-ge-5-0-0.jfk2.example.net
.br
192.0.2.10   esr1-ge-5-0-6.jfk2.example.net
.br
192.0.31.60
.Pp
192.0.2.2    esr2-xe-4-0-0.pax.example.net
.br
192.0.2.5    esr2-xe-4-0-1.pax.example.net
.br
192.0.31.8
.Pp
192.0.2.6    das1-v3005.nj2.example.net
.br
192.0.2.9    das1-v3006.nj2.example.net
.br
192.0.2.44   44.2.0.192.example.net
.Pp
192.0.2.13   esr1-xe-4-0-0.pax.example.net
.Pp
192.0.2.17   esr1-xe-4-0-1.pax.example.net
.Pp
192.0.2.21   esr1-xe-4-0-1.pax.example.net
.fi
.in -.3i
.Pp
Then the following command will build a base set of regular expressions,
as described in section 5.1 of the paper, and output the working set
of regexes inferred for each suffix at the end of that phase.
.Pp
sc_hoiho -d working-set -O norefine public_suffix_list.dat routers.txt
.Pp
To obtain the best selected regular expression for example.net, use:
.Pp
sc_hoiho -d best-regex -D example.net public_suffix_list.dat routers.txt
.Pp
To examine how the best regex applies to the training data
for example.net, use:
.Pp
sc_hoiho -d routers -D example.net public_suffix_list.dat routers.txt
.Pp
To examine how the best regex applies to the training data, as well
as interfaces in the application set, use:
.Pp
sc_hoiho -d routers -D example.net -O application
public_suffix_list.dat routers.txt
.Pp
To see the working set of regexes built after embedding literals in
captures for example.net, use:
.Pp
sc_hoiho -d working-set -D example.net -O norefine -O refine-tp
public_suffix_list.dat routers.txt
.Pp
To see how a manually-derived regex behaves against the training data,
use:
.Pp
sc_hoiho -D example.net 
-r "^([a-z]+\\d+)-.+\\.([a-z\\d]+)\\.example\\.net$" 
.br
-d routers -O norefine
public_suffix_list.dat routers.txt
.Pp
.\""""""""""""
.Sh HINTS
.Nm
can take a long time to run, depending on the training set involved.
One option to breaking up the runtime (but not reducing it) is to
capture the output from one phase, and then use that as input to the
next phase.  For example, to run the first three phases:
.Pp
sc_hoiho -d working-set -O norefine public_suffix_list.dat routers.txt
>phase-1.re
.Pp
sc_hoiho -d working-set -O norefine -O refine-tp -r phase-1.re
public_suffix_list.dat routers.txt >phase-2.re
.Pp
sc_hoiho -d working-set -O norefine -O refine-fne -r phase-2.re
public_suffix_list.dat routers.txt >phase-3.re
.Pp
.\""""""""""""
.Sh NOTES
.Pp
.Nm
follows the format of the hostnames files stored in CAIDA's Internet
Topology Data Kit (ITDK) which stores hostnames in lower-case, and
escapes characters that do not form part of the DNS's alphabet
(A-Z, a-z, - and .) as a hexadecimal escaped string.
For example, if a hostname contains an underscore character, such
as foo_bar, then encode the underscore using the hexadecimal dictionary
in
.Xr ascii 7
as follows: foo\\x5fbar.
.Sh SEE ALSO
.Xr pcre 3 ,
.Xr pcre2 3 ,
.Xr sc_ally 1 ,
.Xr sc_radargun 1 ,
.Xr sc_speedtrap 1 ,
.Rs
.%A "M. Luckie"
.%A "B. Huffaker"
.%A "k claffy"
.%T "Learning to Extract Router Names from Hostnames"
.%O "Proc. ACM Internet Measurement Conference 2019"
.Re
.Rs
.%A "Mozilla Foundation"
.%T "Public Suffix List"
.%O "https://publicsuffix.org/list/"
.Re
.Rs
.%A "Center for Applied Internet Data Analysis (CAIDA)"
.%T "Macroscopic Internet Topology Data Kit (ITDK)"
.%O "https://www.caida.org/data/internet-topology-data-kit/"
.Re
.Rs
.%A "R. Govindan"
.%A "H. Tangmunarunkit"
.%T "Heuristics for Internet Map Discovery"
.%O "Proc. IEEE INFOCOM 2000"
.Re
.Rs
.%A "N. Spring"
.%A "R. Mahajan"
.%A "D. Wetherall"
.%T "Measuring ISP topologies with Rocketfuel"
.%O "Proc. ACM SIGCOMM 2002"
.Re
.Rs
.%A "A. Bender"
.%A "R. Sherwood"
.%A "N. Spring"
.%T "Fixing Ally's growing pains with velocity modeling"
.%O "Proc. ACM/SIGCOMM Internet Measurement Conference 2008"
.Re
.Rs
.%A "K. Keys"
.%A "Y. Hyun"
.%A "M. Luckie"
.%A "k claffy"
.%T "Internet-Scale IPv4 Alias Resolution with MIDAR"
.%O "IEEE/ACM Transactions on Networking 2013"
.Re
.Rs
.%A "M. Luckie"
.%A "R. Beverly"
.%A "W. Brinkmeyer"
.%A "k claffy"
.%T "Speedtrap: Internet-scale IPv6 Alias Resolution"
.%O "Proc. ACM/SIGCOMM Internet Measurement Conference 2013"
.Re
.Sh AUTHORS
.Nm
was written by Matthew Luckie.
